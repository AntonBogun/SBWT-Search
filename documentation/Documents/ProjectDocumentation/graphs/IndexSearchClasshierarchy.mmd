classDiagram
  direction LR
  main --> ArgumentParser
  main --> SbwtBuilder
  main --> CpuSbwtContainer
  main --> GpuSbwtContainer
  main --> Presearcher
  Presearcher --> GpuSbwtContainer
  main --> FilenamesParser

  main --> ContinuousSequenceFileParser
  ContinuousSequenceFileParser --> StringSequenceBatchProducer
  StringSequenceBatchProducer --> StringSequenceBatch
  ContinuousSequenceFileParser --> StringBreakBatchProducer
  StringBreakBatchProducer --> StringBreakBatch
  ContinuousSequenceFileParser --> IntervalBatchProducer
  IntervalBatchProducer --> IntervalBatch

  main --> ContinuousSeqToBitsConverter
  ContinuousSeqToBitsConverter --> InvalidCharsProducer
  InvalidCharsProducer --> InvalidCharsBatch
  ContinuousSeqToBitsConverter --> BitsProducer
  BitsProducer --> BitSeqBatch

  main --> ContinuousPositionsBuilder
  ContinuousPositionsBuilder --> PositionsBuilder
  ContinuousPositionsBuilder --> PositionsBatch

  main --> ContinuousSearcher
  ContinuousSearcher --> Searcher
  ContinuousSearcher --> ResultsBatch

  main --> ContinuousResultsPrinter
  ContinuousResultsPrinter <|-- AsciiContinuousResultsPrinter
  ContinuousResultsPrinter <|-- BinaryContinuousResultsPrinter

  class main {
    main()
    get_gpu_container()
    get_max_chars_per_batch()
  }
  class ArgumentParser {
    parse_arguments(int argc, char** argv)
  }
  class SbwtBuilder {
    string filename
    size_t kmer_size
    get_cpu_sbwt()
  }
  class CpuSbwtContainer {
    to_gpu()
  }
  class GpuSbwtContainer {
    to_gpu()
  }
  class Presearcher {
    GpuSbwtContainer container
    presearch()
  }
  class FilenamesParser {
    get_input_filenames()
    get_output_filenames()
  }

  class ContinuousSequenceFileParser {
    CircularBuffer < shared_ptr < Seq > > batches
    unique_ptr < SeqStreamIn > stream
    read_and_generate()
  }
  class StringSequenceBatchProducer {
    set_string()
  }
  class StringSequenceBatch {
    string *seq
  }
  class StringBreakBatchProducer {
    set(
      vector < size_t > *chars_before_newline,
      size_t string_size
    )
  }
  class StringBreakBatch {
    vector < size_t > *chars_before_newline
    size_t string_size
  }

  class ContinuousSeqToBitsConverter {
    read_and_generate()
  }
  class InvalidCharsProducer {
    set(size_t index)
  }
  class InvalidCharsBatch {
    vector < char > invalid_chars
  }
  class BitsProducer {
    set(u64 index, u64 value)
  }
  class BitSeqBatch {
    vector < u64 > bit_seq
  }

  class ContinuousPositionsBuilder {
    read_and_generate()
  }
  class PositionsBuilder {
    build_positions(
      const vector < size_t > &chars_before_newline,
      const size_t &string_size,
      vector < size_t > &positions
    )
  }
  class PositionsBatch {
    vector < u64 > positions
  }

  class ContinuousSearcher {
    read_and_generate()
  }
  class Searcher {
    search(
      const vector < u64 > &bit_seqs,
      vector < u64 > &kmer_positions,
      vector < u64 > &results,
      const u64 batch_id
    )
  }
  class ResultsBatch {
    vector < size_t > results
  }

  class ContinuousResultsPrinter {
    read_and_generate()
  }
